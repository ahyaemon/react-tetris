{"version":3,"sources":["gameContext.ts","components/screen/screen-left/board/row/cell/CellC.tsx","components/screen/screen-left/board/row/Row.tsx","components/screen/screen-left/board/Board.tsx","components/screen/screen-left/ScreenLeft.tsx","components/screen/screen-right/ScreenRight.tsx","components/screen/Screen.tsx","components/controller/controller-left/ControllerLeft.tsx","game/mino.ts","game/game.ts","game/random.ts","components/controller/controller-right/cross-keys/CrossKeys.tsx","components/controller/controller-right/ControllerRight.tsx","components/controller/Controller.tsx","App.tsx","hooks/useKeyDown.ts","reportWebVitals.ts","index.tsx"],"names":["GameContext","createContext","CellC","color","className","Row","cells","map","cell","index","Board","gameState","useContext","rows","row","ScreenLeft","ScreenRight","Screen","ControllerLeft","Color","MinoType","Command","Mino","minoType","shape","rightCol","Math","max","p","col","leftCol","min","bottomRow","shapeToIndex","flatMap","ar","b","i","filter","minoFactory","I","LightBlue","o","O","Yellow","t","T","Purple","s","S","Green","z","Z","Red","l","L","Orange","j","J","Blue","random","floor","this","Error","Game","currentMino","mino","forEach","position","command","Up","drop","state","rotation","Right","moveRight","Down","moveDown","Left","moveLeft","nextPosition","ncol","collided","nrow","undefined","find","None","Array","fill","_","CrossKeys","setGameState","type","onClick","game","input","ControllerRight","Controller","key","create","App","keyFs","useState","f","useEffect","document","addEventListener","e","keyF","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uXAWeA,G,wBAFKC,wBAAc,K,qBCDnB,SAASC,EAAT,GAAsC,IAArBC,EAAoB,EAApBA,MAC5B,OACI,qBAAKC,UAAS,qBAAgBD,KCDvB,SAASE,EAAT,GAAmC,IAApBC,EAAmB,EAAnBA,MAC1B,OACI,qBAAKF,UAAU,MAAf,SACME,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACR,qBAAKL,UAAU,aAAf,SACI,cAACF,EAAD,CAAOC,MAAOK,KADeC,QCRlC,SAASC,IAAS,IACrBC,EAAcC,qBAAWZ,GAAzBW,UAER,OACI,qBAAKP,UAAU,QAAf,SACMO,EAAUE,KAAKN,KAAI,SAACO,EAAKL,GAAN,OACjB,qBAAKL,UAAU,aAAf,SACI,cAAC,EAAD,CAAKE,MAAOQ,KADiBL,QCPlC,SAASM,IACpB,OACI,qBAAKX,UAAU,aAAf,SACI,qBAAKA,UAAU,oBAAf,SACI,cAAC,EAAD,Q,MCLD,SAASY,IACpB,OACI,sBAAKZ,UAAU,cAAf,UACI,qBAAKA,UAAU,yBAAf,uBAGA,qBAAKA,UAAU,oBAAf,qBCJG,SAASa,IACpB,OACI,sBAAKb,UAAU,SAAf,UACI,qBAAKA,UAAU,eAAf,SACI,cAAC,EAAD,MAEJ,qBAAKA,UAAU,gBAAf,SACI,cAAC,EAAD,S,YCTD,SAASc,IACpB,OACI,sBAAKd,UAAU,iBAAf,UACI,qDACA,8C,gBCJAe,EAWPC,E,+BAXOD,K,YAAAA,E,sBAAAA,E,gBAAAA,E,gBAAAA,E,cAAAA,E,UAAAA,E,gBAAAA,E,aAAAA,M,cAWPC,O,SAAAA,I,SAAAA,I,SAAAA,I,SAAAA,I,SAAAA,I,SAAAA,I,UAAAA,M,KAUE,ICLKC,EDKCC,EAET,WACaC,EACAC,EACArB,GACV,IAAD,gCAHWoB,WAGX,KAFWC,QAEX,KADWrB,QACX,KAEFsB,SAAW,kBAAcC,KAAKC,IAAL,MAAAD,KAAI,YAAQ,EAAKF,MAAMjB,KAAI,SAAAqB,GAAC,OAAIA,EAAEC,UAFzD,KAIFC,QAAU,kBAAcJ,KAAKK,IAAL,MAAAL,KAAI,YAAQ,EAAKF,MAAMjB,KAAI,SAAAqB,GAAC,OAAIA,EAAEC,UAJxD,KAMFG,UAAY,kBAAcN,KAAKC,IAAL,MAAAD,KAAI,YAAQ,EAAKF,MAAMjB,KAAI,SAAAqB,GAAC,OAAIA,EAAEd,UAN1D,KAQMmB,aAAe,SAACT,GAAD,OAAkCA,EAAMU,SAC3D,SAAAC,GAAE,OAAIA,EACD5B,KAAI,SAAC6B,EAAGC,GACL,MAAO,CAAED,IAAGC,QAEfC,QAAO,SAAAF,GAAC,OAAIA,EAAEA,KACd7B,KAAI,SAAA6B,GAAC,OAAIA,EAAEC,UAIXE,EAAc,CACvBF,EADuB,WAEnB,OAAO,IAAIf,EACPF,EAASoB,EACT,CACI,CAAE1B,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,IAEnBV,EAAMsB,YAGdC,EAbuB,WAcnB,OAAO,IAAIpB,EACPF,EAASuB,EACT,CACI,CAAE7B,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,IAEnBV,EAAMyB,SAGdC,EAzBuB,WA0BnB,OAAO,IAAIvB,EACPF,EAAS0B,EACT,CACI,CAAEhC,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,IAEnBV,EAAM4B,SAGdC,EArCuB,WAsCnB,OAAO,IAAI1B,EACPF,EAAS6B,EACT,CACI,CAAEnC,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,IAEnBV,EAAM+B,QAGdC,EAjDuB,WAkDnB,OAAO,IAAI7B,EACPF,EAASgC,EACT,CACI,CAAEtC,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,IAEnBV,EAAMkC,MAGdC,EA7DuB,WA8DnB,OAAO,IAAIhC,EACPF,EAASmC,EACT,CACI,CAAEzC,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,IAEnBV,EAAMqC,SAGdC,EAzEuB,WA0EnB,OAAO,IAAInC,EACPF,EAASsC,EACT,CACI,CAAE5C,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,GACf,CAAEf,IAAK,EAAGe,IAAK,IAEnBV,EAAMwC,OAGdC,OArFuB,WAsFnB,IEtIqBjC,EFuIrB,OEvIqBA,EFsIK,EErIvBD,KAAKmC,MAAMnC,KAAKkC,SAAWjC,IFuI1B,KAAK,EAAG,OAAOmC,KAAKzB,IACpB,KAAK,EAAG,OAAOyB,KAAKpB,IACpB,KAAK,EAAG,OAAOoB,KAAKjB,IACpB,KAAK,EAAG,OAAOiB,KAAKd,IACpB,KAAK,EAAG,OAAOc,KAAKX,IACpB,KAAK,EAAG,OAAOW,KAAKR,IACpB,KAAK,EAAG,OAAOQ,KAAKL,IACpB,QAAS,MAAMM,MAAM,oC,SC5HrB1C,O,WAAAA,I,iBAAAA,I,eAAAA,I,gBAAAA,M,KAOL,IAAM2C,EAAb,WAKI,WACYC,EACApD,GACT,yBAFSoD,cAEV,KADUpD,OAPhB,uCAuBI,WAAwB,IAAD,OACbA,EAAOiD,KAAKjD,KAAKN,KAAI,SAAAO,GAAG,OAAIA,EAAIP,KAAI,SAAAC,GAAI,OAAIA,QAIlD,OAHAsD,KAAKG,YAAYC,KAAK1C,MAAM2C,SAAQ,SAAAC,GAChCvD,EAAK,EAAKoD,YAAYG,SAAStD,IAAMsD,EAAStD,KAAK,EAAKmD,YAAYG,SAASvC,IAAMuC,EAASvC,KAAO,EAAKoC,YAAYC,KAAK/D,SAEtH,CAAEU,UA5BjB,mBA+BI,SAAawD,GAqBT,OApBIA,IAAYhD,EAAQiD,IAEpBR,KAAKS,OAGLT,KAAKjD,KAAOiD,KAAKU,MAAM3D,KAGvBiD,KAAKG,YAAc,CACfC,KAAM3B,EAAYqB,SAClBQ,SAAU,CAAEtD,IAAK,EAAGe,IAAK,GACzB4C,SAAU,IAEPJ,IAAYhD,EAAQqD,MAC3BZ,KAAKa,YACEN,IAAYhD,EAAQuD,KAC3Bd,KAAKe,WACER,IAAYhD,EAAQyD,MAC3BhB,KAAKiB,WAEFjB,KAAKU,QApDpB,uBAuDI,WACI,IAAMQ,EAAyB,CAC3BlE,IAAKgD,KAAKG,YAAYG,SAAStD,IAC/Be,IAAKiC,KAAKG,YAAYG,SAASvC,IAAM,GAGpCmD,EAAanD,IAAMiC,KAAKG,YAAYC,KAAKzC,WAAauC,EAAKiB,OAC1DnB,KAAKoB,SAASF,KAEhBlB,KAAKG,YAAYG,SAAWY,KAhExC,sBAoEI,WACI,IAAMA,EAAyB,CAC3BlE,IAAKgD,KAAKG,YAAYG,SAAStD,IAC/Be,IAAKiC,KAAKG,YAAYG,SAASvC,IAAM,GAGpCmD,EAAanD,IAAMiC,KAAKG,YAAYC,KAAKpC,WAAa,IACrDgC,KAAKoB,SAASF,KAGhBlB,KAAKG,YAAYG,SAAWY,KA9ExC,sBAkFI,WACI,IAAMA,EAAyB,CAC3BlE,IAAKgD,KAAKG,YAAYG,SAAStD,IAAM,EACrCe,IAAKiC,KAAKG,YAAYG,SAASvC,KAG9BmD,EAAalE,IAAMgD,KAAKG,YAAYC,KAAKlC,YAAcgC,EAAKmB,OAC3DrB,KAAKoB,SAASF,KAEhBlB,KAAKG,YAAYG,SAAWY,KA3FxC,kBA+FI,WACI,OAAa,CACT,IAAMA,EAAyB,CAC3BlE,IAAKgD,KAAKG,YAAYG,SAAStD,IAAM,EACrCe,IAAKiC,KAAKG,YAAYG,SAASvC,KAEnC,KACKmD,EAAalE,IAAMgD,KAAKG,YAAYC,KAAKlC,YAAcgC,EAAKmB,OAC3DrB,KAAKoB,SAASF,GAIhB,MAFAlB,KAAKG,YAAYG,SAAWY,KAzG5C,sBAgHI,SAAiBZ,GAA8B,IAAD,OAC1C,YAOOgB,IAPAtB,KAAKG,YAAYC,KAAK1C,MAAMjB,KAAI,SAAAqB,GACnC,MAAO,CACHd,IAAKsD,EAAStD,IAAMc,EAAEd,IACtBe,IAAKuC,EAASvC,IAAMD,EAAEC,QAE3BwD,MAAK,SAAAzD,GACJ,OAAO,EAAKf,KAAKe,EAAEd,KAAKc,EAAEC,OAASV,EAAMmE,WAvHrD,qBAUI,WAAuB,IAAD,OACZzE,EAAO0E,MAAMzB,KAAKqB,MACnBK,KAAK,GACLjF,KAAI,SAAAkF,GAAC,OAAIF,MAAM,EAAKN,MAAMO,KAAKrE,EAAMmE,SAO1C,OAAO,IAAItB,EANsB,CAC7BE,KAAM3B,EAAYkB,IAClBW,SAAU,CAAEtD,IAAK,EAAGe,IAAK,GACzB4C,SAAU,GAGe5D,OApBrC,KEpBe,SAAS6E,IAAY,MAEI9E,qBAAWZ,GAA5B2F,GAFa,EAExBhF,UAFwB,EAEbgF,cAEnB,OACI,sBAAKvF,UAAU,YAAf,UACI,wBACIwF,KAAK,SACLC,QAAS,WAAQF,EAAaG,EAAKC,MAAM1E,EAAQiD,MAFrD,oBAIA,uBACA,wBACIsB,KAAK,SACLC,QAAS,WAAQF,EAAaG,EAAKC,MAAM1E,EAAQyD,QAFrD,oBAIA,wBACIc,KAAK,SACLC,QAAS,WAAQF,EAAaG,EAAKC,MAAM1E,EAAQqD,SAFrD,oBAIA,uBACA,wBACIkB,KAAK,SACLC,QAAS,WAAQF,EAAaG,EAAKC,MAAM1E,EAAQuD,QAFrD,uBCtBG,SAASoB,IACpB,OACI,qBAAK5F,UAAU,kBAAf,SACI,qBAAKA,UAAU,6BAAf,SACI,cAAC,EAAD,QCHD,SAAS6F,IACpB,OACI,sBAAK7F,UAAU,aAAf,UACI,qBAAKA,UAAU,mBAAf,SACI,cAAC,EAAD,MAEJ,qBAAKA,UAAU,oBAAf,SACI,cAAC,EAAD,SJcH4D,EAEMiB,KAAO,GAFbjB,EAGMmB,KAAO,GKrB1B,IAAMe,EACI,YADJA,EAEE,UAFFA,EAGK,aAHLA,EAII,YAGGJ,EAAO9B,EAAKmC,SA2BVC,MAzBf,WAAgB,ICVWC,EDUZ,EACuBC,mBAASR,EAAKtB,OADrC,mBACJ7D,EADI,KACOgF,EADP,KASX,OCnBuBU,EDYZ,CACP,CAAEH,IAAKA,EAAWK,EAAG,WAAQZ,EAAaG,EAAKC,MAAM1E,EAAQuD,SAC7D,CAAEsB,IAAKA,EAASK,EAAG,WAAQZ,EAAaG,EAAKC,MAAM1E,EAAQiD,OAC3D,CAAE4B,IAAKA,EAAYK,EAAG,WAAQZ,EAAaG,EAAKC,MAAM1E,EAAQqD,UAC9D,CAAEwB,IAAKA,EAAWK,EAAG,WAAQZ,EAAaG,EAAKC,MAAM1E,EAAQyD,UCfjE0B,qBAAU,WACNC,SAASC,iBAAiB,WAAW,SAAAC,GACjC,IAAMC,EAAOP,EAAMhB,MAAK,SAAAuB,GAAI,OAAIA,EAAKV,MAAQS,EAAET,OAC3CU,GACAA,EAAKL,OAGV,KAEJ,IDUC,cAAC,EAAYM,SAAb,CAAsBC,MAAO,CAACnG,YAAWgF,gBAAzC,SACI,sBAAKvF,UAAU,MAAf,UAEI,wBAAQA,UAAU,cAAlB,8BACA,qBAAKA,UAAU,cAAf,SACI,cAAC,EAAD,MAEJ,qBAAKA,UAAU,iBAAf,SACI,cAAC,EAAD,YErBL2G,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASkB,eAAe,SAM1BZ,M","file":"static/js/main.7956e635.chunk.js","sourcesContent":["import {createContext} from \"react\";\nimport {GameState} from \"./game/game\";\n\n\ntype GameContextType = {\n    gameState: GameState\n    setGameState: (gameState: GameState) => void\n}\n\nconst GameContext = createContext({} as GameContextType)\n\nexport default GameContext\n","import React from 'react';\nimport './Cell.scss';\nimport {Color} from \"../../../../../../game/mino\";\n\ntype CellProps = {\n    color: Color\n}\n\nexport default function CellC({ color }: CellProps) {\n    return (\n        <div className={`cell cell--${color}`}>\n\n        </div>\n    )\n}\n","import React from 'react';\nimport './Row.scss';\nimport {Cell} from \"../../../../../game/game\";\nimport CellC from \"./cell/CellC\";\n\ntype RowProps = {\n    cells: Cell[]\n}\n\nexport default function Row({ cells }: RowProps) {\n    return (\n        <div className=\"row\">\n            { cells.map((cell, index) => (\n                <div className=\"row__cells\" key={index}>\n                    <CellC color={cell}/>\n                </div>\n            )) }\n        </div>\n    )\n}\n","import React, {useContext} from 'react';\nimport './Board.scss';\nimport GameContext from \"../../../../gameContext\";\nimport Row from \"./row/Row\";\n\nexport default function Board() {\n    const { gameState } = useContext(GameContext)\n\n    return (\n        <div className=\"board\">\n            { gameState.rows.map((row, index) => (\n                <div className=\"board__row\" key={index}>\n                    <Row cells={row}/>\n                </div>\n            )) }\n        </div>\n    )\n}\n","import React from 'react';\nimport './ScreenLeft.scss';\nimport Board from \"./board/Board\";\n\nexport default function ScreenLeft() {\n    return (\n        <div className=\"screenLeft\">\n            <div className=\"screenLeft__board\">\n                <Board/>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport './ScreenRight.scss';\n\nexport default function ScreenRight() {\n    return (\n        <div className=\"screenRight\">\n            <div className=\"screenRight__afterNext\">\n                afterNext\n            </div>\n            <div className=\"screenRight__hold\">\n                hold\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport './Screen.scss';\nimport ScreenLeft from \"./screen-left/ScreenLeft\";\nimport ScreenRight from \"./screen-right/ScreenRight\";\n\nexport default function Screen() {\n    return (\n        <div className=\"screen\">\n            <div className=\"screen__left\">\n                <ScreenLeft/>\n            </div>\n            <div className=\"screen__right\">\n                <ScreenRight/>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport './ControllerLeft.scss';\n\nexport default function ControllerLeft() {\n    return (\n        <div className=\"controllerLeft\">\n            <p>prev mino/after mino</p>\n            <p>prev/after</p>\n        </div>\n    )\n}\n","import {Position} from \"./potision\";\nimport {getRandomInt} from \"./random\";\n\nexport enum Color {\n    None = 'none',\n    LightBlue = 'lightBlue',\n    Yellow = 'yellow',\n    Purple = 'purple',\n    Green = 'green',\n    Red = 'red',\n    Orange = 'orange',\n    Blue = 'blue',\n}\n\nenum MinoType {\n    I,\n    O,\n    T,\n    S,\n    Z,\n    L,\n    J,\n}\n\nexport class Mino {\n\n    constructor(\n        readonly minoType: MinoType,\n        readonly shape: Position[],\n        readonly color: Color,\n    ) {}\n\n    rightCol = (): number => Math.max(...this.shape.map(p => p.col))\n\n    leftCol = (): number => Math.min(...this.shape.map(p => p.col))\n\n    bottomRow = (): number => Math.max(...this.shape.map(p => p.row))\n\n    private shapeToIndex = (shape: boolean[][]): number[] => shape.flatMap(\n        ar => ar\n            .map((b, i) => {\n                return { b, i }\n            })\n            .filter(b => b.b)\n            .map(b => b.i)\n    )\n}\n\nexport const minoFactory = {\n    i(): Mino {\n        return new Mino(\n            MinoType.I,\n            [\n                { row: 0, col: 0 },\n                { row: 1, col: 0 },\n                { row: 2, col: 0 },\n                { row: 3, col: 0 },\n            ],\n            Color.LightBlue,\n        )\n    },\n    o(): Mino {\n        return new Mino(\n            MinoType.O,\n            [\n                { row: 0, col: 0 },\n                { row: 0, col: 1 },\n                { row: 1, col: 0 },\n                { row: 1, col: 1 },\n            ],\n            Color.Yellow,\n        )\n    },\n    t(): Mino {\n        return new Mino(\n            MinoType.T,\n            [\n                { row: 0, col: 1 },\n                { row: 1, col: 0 },\n                { row: 1, col: 1 },\n                { row: 1, col: 2 },\n            ],\n            Color.Purple,\n        )\n    },\n    s(): Mino {\n        return new Mino(\n            MinoType.S,\n            [\n                { row: 0, col: 1 },\n                { row: 0, col: 2 },\n                { row: 1, col: 0 },\n                { row: 1, col: 1 },\n            ],\n            Color.Green,\n        )\n    },\n    z(): Mino {\n        return new Mino(\n            MinoType.Z,\n            [\n                { row: 0, col: 0 },\n                { row: 0, col: 1 },\n                { row: 1, col: 1 },\n                { row: 1, col: 2 },\n            ],\n            Color.Red,\n        )\n    },\n    l(): Mino {\n        return new Mino(\n            MinoType.L,\n            [\n                { row: 0, col: 2 },\n                { row: 1, col: 0 },\n                { row: 1, col: 1 },\n                { row: 1, col: 2 },\n            ],\n            Color.Orange,\n        )\n    },\n    j(): Mino {\n        return new Mino(\n            MinoType.J,\n            [\n                { row: 0, col: 0 },\n                { row: 1, col: 0 },\n                { row: 1, col: 1 },\n                { row: 1, col: 2 },\n            ],\n            Color.Blue,\n        )\n    },\n    random(): Mino {\n        const rand =　getRandomInt(7)\n        switch (rand) {\n            case 0: return this.i()\n            case 1: return this.o()\n            case 2: return this.t()\n            case 3: return this.s()\n            case 4: return this.z()\n            case 5: return this.l()\n            case 6: return this.j()\n            default: throw Error(\"failed to create random mino\")\n        }\n    }\n}\n\n// eslint-disable-next-line\nconst transpose = (a: any[][]) => a[0].map((_, c) => a.map(r => r[c]));\n","import {Color, Mino, minoFactory} from \"./mino\";\nimport {Position} from \"./potision\";\n\nexport type Cell = Color\n\ntype Row = Cell[]\n\ntype Rotation = 0 | 90 | 180 | 270\n\ninterface CurrentMino {\n    mino: Mino,\n    position: Position,\n    rotation: Rotation\n}\n\nexport type GameState = {\n    rows: Row[]\n}\n\nexport enum Command {\n    Up,\n    Right,\n    Down,\n    Left,\n}\n\nexport class Game {\n\n    private static ncol = 10\n    private static nrow = 20\n\n    constructor(\n        private currentMino: CurrentMino,\n        private rows: Row[],\n    ) {}\n\n    static create(): Game {\n        const rows = Array(this.nrow)\n            .fill(0)\n            .map(_ => Array(this.ncol).fill(Color.None))\n        const currentMino: CurrentMino = {\n            mino: minoFactory.j(),\n            position: { row: 0, col: 3 },\n            rotation: 0\n        }\n\n        return new Game(currentMino, rows)\n    }\n\n    get state(): GameState {\n        const rows = this.rows.map(row => row.map(cell => cell))\n        this.currentMino.mino.shape.forEach(position => {\n            rows[this.currentMino.position.row + position.row][this.currentMino.position.col + position.col] = this.currentMino.mino.color\n        })\n        return { rows }\n    }\n\n    public input(command: Command): GameState {\n        if (command === Command.Up) {\n            // mino を一番下まで落とす\n            this.drop()\n\n            // rows を state().rows に置き換え\n            this.rows = this.state.rows\n\n            // 次のミノを表示\n            this.currentMino = {\n                mino: minoFactory.random(),\n                position: { row: 0, col: 3 },\n                rotation: 0\n            }\n        } else if (command === Command.Right) {\n            this.moveRight()\n        } else if (command === Command.Down) {\n            this.moveDown()\n        } else if (command === Command.Left) {\n            this.moveLeft()\n        }\n        return this.state\n    }\n\n    private moveRight() {\n        const nextPosition: Position = {\n            row: this.currentMino.position.row,\n            col: this.currentMino.position.col + 1,\n        }\n        if (\n            (nextPosition.col + this.currentMino.mino.rightCol() < Game.ncol) &&\n            (!this.collided(nextPosition))\n        ) {\n            this.currentMino.position = nextPosition\n        }\n    }\n\n    private moveLeft() {\n        const nextPosition: Position = {\n            row: this.currentMino.position.row,\n            col: this.currentMino.position.col - 1,\n        }\n        if (\n            (nextPosition.col + this.currentMino.mino.leftCol() >= 0) &&\n            (!this.collided(nextPosition))\n        )\n        {\n            this.currentMino.position = nextPosition\n        }\n    }\n\n    private moveDown() {\n        const nextPosition: Position = {\n            row: this.currentMino.position.row + 1,\n            col: this.currentMino.position.col,\n        }\n        if (\n            (nextPosition.row + this.currentMino.mino.bottomRow() < Game.nrow) &&\n            (!this.collided(nextPosition))\n        ) {\n            this.currentMino.position = nextPosition\n        }\n    }\n\n    private drop() {\n        while (true) {\n            const nextPosition: Position = {\n                row: this.currentMino.position.row + 1,\n                col: this.currentMino.position.col\n            }\n            if (\n                (nextPosition.row + this.currentMino.mino.bottomRow() < Game.nrow) &&\n                (!this.collided(nextPosition))\n            ) {\n                this.currentMino.position = nextPosition\n            } else {\n                break\n            }\n        }\n    }\n\n    private collided(position: Position): boolean {\n        return this.currentMino.mino.shape.map(p => {\n            return {\n                row: position.row + p.row,\n                col: position.col + p.col,\n            }\n        }).find(p => {\n            return this.rows[p.row][p.col] !== Color.None\n        }) !== undefined\n    }\n}\n","export function getRandomInt(max: number) {\n    return Math.floor(Math.random() * max);\n}\n","import React, {useContext} from 'react';\nimport './CrossKeys.scss';\nimport GameContext from \"../../../../gameContext\";\nimport {Command} from \"../../../../game/game\";\nimport {game} from \"../../../../App\";\n\nexport default function CrossKeys() {\n    // eslint-disable-next-line\n    const { gameState, setGameState } = useContext(GameContext)\n\n    return (\n        <div className=\"crossKeys\">\n            <button\n                type=\"button\"\n                onClick={() => { setGameState(game.input(Command.Up)) }}\n            >上</button>\n            <br/>\n            <button\n                type=\"button\"\n                onClick={() => { setGameState(game.input(Command.Left)) }}\n            >左</button>\n            <button\n                type=\"button\"\n                onClick={() => { setGameState(game.input(Command.Right)) }}\n            >右</button>\n            <br/>\n            <button\n                type=\"button\"\n                onClick={() => { setGameState(game.input(Command.Down)) }}\n            >下</button>\n        </div>\n    )\n}\n","import React from 'react';\nimport './ControllerRight.scss';\nimport CrossKeys from \"./cross-keys/CrossKeys\";\n\nexport default function ControllerRight() {\n    return (\n        <div className=\"controllerRight\">\n            <div className=\"controllerRight__crossKeys\">\n                <CrossKeys/>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport './Controller.scss';\nimport ControllerLeft from \"./controller-left/ControllerLeft\";\nimport ControllerRight from \"./controller-right/ControllerRight\";\n\nexport default function Controller() {\n    return (\n        <div className=\"controller\">\n            <div className=\"controller__left\">\n                <ControllerLeft/>\n            </div>\n            <div className=\"controller__right\">\n                <ControllerRight/>\n            </div>\n        </div>\n    )\n}\n","import React, {useState} from 'react';\nimport './App.scss';\nimport Screen from \"./components/screen/Screen\";\nimport Controller from \"./components/controller/Controller\";\nimport GameContext from \"./gameContext\";\nimport {Command, Game} from \"./game/game\";\nimport {useKeyDown} from \"./hooks/useKeyDown\";\n\nconst key = {\n    down: 'ArrowDown',\n    up: 'ArrowUp',\n    right: 'ArrowRight',\n    left: 'ArrowLeft',\n}\n\nexport const game = Game.create()\n\nfunction App() {\n    const [gameState, setGameState] = useState(game.state)\n    useKeyDown([\n        { key: key.down,  f: () => { setGameState(game.input(Command.Down)) } },\n        { key: key.up,  f: () => { setGameState(game.input(Command.Up)) } },\n        { key: key.right,  f: () => { setGameState(game.input(Command.Right)) } },\n        { key: key.left,  f: () => { setGameState(game.input(Command.Left)) } },\n    ])\n\n    return (\n        <GameContext.Provider value={{gameState, setGameState}}>\n            <div className=\"app\">\n\n                <header className=\"app__header\">tetris simulator</header>\n                <div className=\"app__screen\">\n                    <Screen/>\n                </div>\n                <div className=\"app_controller\">\n                    <Controller/>\n                </div>\n            </div>\n        </GameContext.Provider>\n    );\n}\n\nexport default App;\n","import {useEffect} from \"react\";\n\ntype KeyF = {\n    key: string,\n    f: () => void\n}\n\nexport function useKeyDown(keyFs: KeyF[]) {\n    useEffect(() => {\n        document.addEventListener(\"keydown\", e => {\n            const keyF = keyFs.find(keyF => keyF.key === e.key)\n            if (keyF) {\n                keyF.f()\n            }\n\n        }, false);\n        // eslint-disable-next-line\n    }, [])\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}